import { mkdir, readdir, rm, writeFile } from "node:fs/promises";
import { createHash } from "node:crypto";
import { fileURLToPath } from "node:url";
import { dirname, resolve } from "node:path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = resolve(__dirname, "..");
const sourcePath = resolve(projectRoot, "functions/client/pixel-runtime.source.js");
const distDir = resolve(projectRoot, "dist");
const artifactPath = resolve(projectRoot, "functions/client/pixel-runtime.artifact.js");

async function loadSource() {
  const { readFile } = await import("node:fs/promises");
  return readFile(sourcePath, "utf8");
}

async function transform(code) {
  try {
    const esbuild = await import("esbuild");
    const result = await esbuild.transform(code, {
      minify: true,
      format: "iife",
      target: "es2017"
    });
    return result.code.trim();
  } catch (err) {
    console.warn("esbuild unavailable, falling back to basic minifier", err.message);
    return code
      .replace(/\n+/g, "")
      .replace(/\s{2,}/g, " ")
      .replace(/\s*([{}();,:])\s*/g, "$1");
  }
}

async function cleanupDist() {
  try {
    const entries = await readdir(distDir, { withFileTypes: true });
    await Promise.all(
      entries
        .filter(entry => entry.isFile() && /^pixel-runtime\.v[\da-f]+\.js$/.test(entry.name))
        .map(entry => rm(resolve(distDir, entry.name)))
    );
  } catch (err) {
    if (err.code !== "ENOENT") throw err;
  }
}

async function buildRuntime() {
  const source = await loadSource();
  const minified = await transform(source);
  const hash = createHash("sha256").update(minified).digest("hex").slice(0, 10);
  const fileName = `pixel-runtime.v${hash}.js`;

  await mkdir(distDir, { recursive: true });
  await cleanupDist();
  await writeFile(resolve(distDir, fileName), minified, "utf8");

  const artifact = `// Auto-generated by scripts/build-pixel-runtime.mjs\nexport const PIXEL_RUNTIME_FILENAME = ${JSON.stringify(fileName)};\nexport const PIXEL_RUNTIME_SOURCE = ${JSON.stringify(minified)};\n`;
  await writeFile(artifactPath, artifact, "utf8");

  return { fileName };
}

buildRuntime()
  .then(({ fileName }) => {
    console.log(`Built ${fileName}`);
  })
  .catch(err => {
    console.error(err);
    process.exit(1);
  });
